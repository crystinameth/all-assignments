/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require("express")
  const bodyParser = require("body-parser")
  const fs = require("fs")
  const path = require("path")
  
  const app = express()
  const port = 3000
  
  app.use(bodyParser.json())
  // let todos = []
  
  function findID(arr, id){
    for(let i = 0; i < arr.length; i++){
      if (arr[i].id === id)
        return i
    }
    return -1
  }
  
  function remove(arr,id){
  //   let index = findID(arr,id)
  //   if(index > -1){
  //     arr.splice(index,1)
  //   }
  //   return arr
    let newTodo = []
    for(let i=0; i<arr.length; i++){
      if(i !== id) newTodo.push(arr[i])
    }
    return newTodo
  }
  
  app.get('/todos', (req,res) => {
      fs.readFile("todos.json", "utf-8", (err, data) => {
          if (err) throw err
          res.json(JSON.parse(data))
      })
  })
  
  app.get('/todos/:id', (req,res) => {
      fs.readFile("todos.json","utf-8",(err,data) => {
          if(err) throw err
          const todos = JSON.parse(data)     // essential cuz this data will be passed in functions to check ID and stuff , earlier array todos was used 
          const todoID = findID(todos,parseInt(req.params.id))
          if(todoID === -1){
          res.status(404).send("Not found!")
          }
          else{
          res.status(200).json(todos[todoID])
          }
      })
  })
  
  app.post('/todos',(req,res) => {
    const task = {
      id: Math.floor(Math.random() * 1000000),
      title: req.body.title,
      completed: false,
      description: req.body.description
    }
    fs.readFile("todos.json","utf-8",(err,data) => {                  //read file
      const todos = JSON.parse(data)                                  //parse data
      todos.push(task)                                                //push new task
      fs.writeFile("todos.json",JSON.stringify(todos), (err) => {     //write to file, stringify
          if (err) throw err
          res.status(201).json(task)
      })
    })
  })
  
  app.put('/todos/:id',(req,res) => {
      fs.readFile("todos.json","utf-8", (err,data) => {
          if (err) throw err
          const todos = JSON.parse(data)
          const todoID = findID(todos, parseInt(req.params.id))
          if(todoID === -1){
              res.status(404).send("Not found!")
            }
            else{
              /*
                  FOR DIRECT ACCESS -> USING ARRAY TODOS
               todos[todoID].title = req.body.title
               todos[todoID].description = req.body.description
               todos[todoID].completed = req.body.completed
               res.status(200).json(todos[todoID])
              */
  
              /*     FILE ACCESS       
                  updated task object
                  parsed todos update
                  write to file
              */
              const updatedTask = {
                  id: todos[todoID].id,
                  title: req.body.title,
                  description: req.body.description
              }
              todos[todoID] = updatedTask
              fs.writeFile("todos.json", JSON.stringify(data), (err) => {
                  if (err) throw err
                  res.status(200).json(updatedTask)
              })
            }
      })
  })
  
  app.delete('/todos/:id',(req,res) => {
      fs.readFile("todos.json","utf-8",(err,data) =>{
          if(err) throw err
          const todos = JSON.parse(data)
          const todoID = findID(todos,parseInt(todos,req.params.id))
          if(todoID === -1){
              res.status(404).send("Not found!")
          }
          else{
              todos = remove(todos,todoID)
              // Write each change in File 
              fs.writeFile("todos.json",JSON.stringify(todos),(err)=>{
                  if (err) throw err
                  res.status(200).send()
              })
          }
      })
  })
  
  // app.use((req,res,next) => {
  //   res.status(404).send("Not found!")
  // })
  
  app.get("/",(req,res)=>{
      res.sendFile(path.join(__dirname,"index.html"))
  })
  app.listen(port, () => {
      console.log(`App is listening on port ${port} `);
    });